wh me=Beginning installation of cmd-glow-chat-system
@prog cmd-glow-chat-system
1 99999 d
1 i
( cmd-chat-system: $Date: 2009/04/28 18:21:27 $ $Revision: 1.5 $             )
( Purpose: Provides a muckwide chat network                                   )
( Author: Feaelin Moilar                                                      )
( Contributors:                                                               )
( Dependencies: lib-strings, lib-edit, lib-case                               )
( --------------------------------------------------------------------------- )
(
  $Log: cmd-glow-chat-system,v $
  Revision 1.5  2009/04/28 18:21:27  feaelin
  Added permissions editor; support for yes/no permissions done.

  Revision 1.4  2009/04/28 17:15:13  feaelin
  Removed vestigial prompted channel edit
  Added code to channel editor so that the exit name/alias list is updated.

  Revision 1.3  2009/04/28 16:55:54  feaelin
  Completed add menu.

  Revision 1.2  2009/04/26 14:29:53  feaelin
  Fixed various installer script issues caused by the rename.

  Revision 1.1  2009/04/26 14:25:08  feaelin
  Initial revision

)
( --------------------------------------------------------------------------- )
 
$include $lib/strings
$include $lib/edit
$include $lib/case
$include $lib/mv-cp
 
( While I have this set to 'prog' so that the channels are stored on the      )
( program and thereby the same muckwide, it could be set to 'trigger @' which )
( would store them on the triggering action, making it possible to have area  )
( specific channels.                                                          )
$def DBITEM     prog
$def CHANNELDIR "/Channels/"
$def ALIASDIR   "/Aliases/" 
 
: getNetSeparator ( -- S-Separator )
  DBITEM "/NetSeparator" getpropstr
;
 
: getShortName ( S-Alias -- S-ShortName )
  DBITEM ALIASDIR command @ strcat getpropstr
;
 
: moveChannel ( S-ShortName S-NewShortName -- bool )
  "/Channels/" swap strcat
  swap
  "/Channels/" swap strcat swap
  DBITEM -3 rotate DBITEM swap MVCP-move-prop
;
 
: bindAlias ( S-ShortName S-Alias )
  DBITEM ALIASDIR rot strcat rot setprop
;
 
: getActive ( S-ShortName -- S-Active )
  dup STR-blank? if
    pop "" exit
  then
  DBITEM CHANNELDIR rot strcat getpropstr
;
 
: setChannelActive ( S-ShortName -- )
  DBITEM CHANNELDIR rot strcat "Active" setprop
;
 
: setChannelInActive ( S-ShortName -- )
  DBITEM CHANNELDIR rot strcat "Inactive" setprop
;
 
: getFullName ( S-ShortName -- S-FullName )
  DBITEM CHANNELDIR rot strcat "/Name" strcat getpropstr
;
 
: setFullName ( S-ShortName S-FullName -- )
  swap CHANNELDIR swap strcat "/Name" strcat
  DBITEM swap rot setprop
;
 
: getAliases ( S-ShortName -- S-AliasList )
  DBITEM CHANNELDIR rot strcat "/Aliases" strcat getpropstr
;
 
: setAliases ( S-ShortName S-Aliases -- )
  swap CHANNELDIR swap strcat "/Aliases" strcat
  DBITEM swap rot setprop
;
 
: setAlias ( S-Alias S-ShortName -- )
  DBITEM ALIASDIR 4 rotate strcat rot setprop
;
 
: removeAlias ( S-Alias -- )
  DBITEM swap ALIASDIR swap strcat remove_prop
;
 
: getOptStatus ( S-ShortName -- S-OptStatus )
  DBITEM CHANNELDIR rot strcat "/OptInOut" strcat getpropstr
;
 
: setOptStatus ( S-ShortName S-OptStatus -- )
  swap CHANNELDIR swap strcat "/OptInOut" strcat
  DBITEM swap rot setprop
;
 
: getNetColor ( S-ShortName -- S-NetColor )
  DBITEM CHANNELDIR rot strcat "/NetColor" strcat getpropstr
;
 
: setNetColor ( S-ShortName S-NetColor -- )
  swap CHANNELDIR swap strcat "/NetColor" strcat
  DBITEM swap rot setprop
;
 
: getMessageColor ( S-ShortName -- S-MessageColor )
  DBITEM CHANNELDIR rot strcat "/MessageColor" strcat getpropstr
;
 
: setMessageColor ( S-ShortName S-MessageColor -- )
  swap CHANNELDIR swap strcat "/MessageColor" strcat
  DBITEM swap rot setprop
;
 
: getGuestTalk ( S-ShortName -- B-GuestTalk )
  DBITEM CHANNELDIR rot strcat "/GuestTalk" strcat getpropval
;
 
: toggleGuestTalk ( S-ShortName -- )
  CHANNELDIR swap strcat "/GuestTalk" strcat 
  dup DBITEM swap getpropval if
    DBITEM swap 0 setprop
  else
    DBITEM swap 1 setprop
  then
;
 
: getGuestListen ( S-ShortName -- B-GuestListen )
  DBITEM CHANNELDIR rot strcat "/GuestListen" strcat getpropval
;
 
: toggleGuestListen ( S-ShortName -- )
  CHANNELDIR swap strcat "/GuestListen" strcat 
  dup DBITEM swap getpropval if
    DBITEM swap 0 setprop
  else
    DBITEM swap 1 setprop
  then
;
 
: getZombieTalk ( S-ShortName -- B-ZombieTalk )
  DBITEM CHANNELDIR rot strcat "/ZombieTalk" strcat getpropval
;
 
: toggleZombieTalk ( S-ShortName -- )
  CHANNELDIR swap strcat "/ZombieTalk" strcat 
  dup DBITEM swap getpropval if
    DBITEM swap 0 setprop
  else
    DBITEM swap 1 setprop
  then
;
 
: getZombieListen ( S-ShortName -- B-ZombieListen )
  DBITEM CHANNELDIR rot strcat "/ZombieListen" strcat getpropval
;
 
: toggleZombieListen ( S-ShortName -- )
  CHANNELDIR swap strcat "/ZombieListen" strcat 
  dup DBITEM swap getpropval if
    DBITEM swap 0 setprop
  else
    DBITEM swap 1 setprop
  then
;
 
: getLevelTalk ( S-ShortName -- I-LevelListen )
  DBITEM CHANNELDIR rot strcat "/LevelTalk" strcat getpropval
;
 
: setLevelTalk ( S-ShortName I-LevelTalk -- )
  swap CHANNELDIR swap strcat "/LevelTalk" strcat
  DBITEM swap rot setprop
;
 
: getLevelListen ( S-ShortName -- I-LevelListen )
  DBITEM CHANNELDIR rot strcat "/LevelListen" strcat getpropval
;
 
: setLevelListen ( S-ShortName I-LevelListen -- )
  swap CHANNELDIR swap strcat "/LevelListen" strcat
  DBITEM swap rot setprop
;
 
: getOptList ( S-ShortName -- S-OptList )
  DBITEM CHANNELDIR rot strcat "/OptList" strcat getpropstr
;
 
: setOptList ( S-ShortName S-OptList -- )
  swap CHANNELDIR swap strcat "/OptList" strcat
  DBITEM swap rot setprop
;
 
: menu-header ( S-MenuName -- )
  "^WHITE^------------------------------------------------------------------------^RESET^"
  "^GREEN^  Glow Chat System                                        ^FOREST^" 
  "$Revision: 1.5 $" 1 strcut swap pop dup strlen 1 - strcut pop strcat
  ": ^YELLOW^" ": " subst
  "^FOREST^  By Feaelin Moilar (Iain E. Davis)                  ^YELLOW^"
  4 rotate dup strlen 19 swap - "                   " 
  swap strcut pop swap strcat strcat "^RESET^" strcat
  "^WHITE^------------------------------------------------------------------------^RESET^"
  4 EDIT-ansi_display
;
 
: print-help ( -- )
  "HELP" menu-header
;

: NotifyPlayer ( D-player S-message -- )
  getShortName getNetColor getShortName strcat
  getNetSeparator strcat " " strcat
  getShortName getMessageColor strcat me @ name strcat
  over 1 strcut pop
  ":;" swap instr if ( pose? )
    swap 1 strcut swap pop swap
    over 1 strcut pop
    "abcdefghijklmnopqrstuvwxyz" swap
    instr if ( does it start with a letter? )
      " " strcat  swap strcat
    else
      swap strcat
    then
  else
    " says, \"" strcat swap strcat "\"" strcat
  then
  ansi_notify
;
 
: canListen? ( D-player  -- bool )
  dup "GUEST" flag? if
    getShortName getGuestListen not if
      pop 0 exit
    then
  then
  dup player? not if
   ( thing+zombie+zombie is still allowed )
    dup thing? if
      dup "ZOMBIE" flag? if
        getShortName getZombieListen not if
          pop 0 exit
        then
      else
        pop 0 exit
      then
    else
      pop 0 exit
    then
  then
  getShortName getLevelListen
  over mlevel > if
    pop 0 exit
  then
  pop 1
;
 
: Talk ( S-message -- )
  online dup 2 + rotate ( connected-RNG S-message )
  getShortName "" ( connected-RNG S-message S-Channel S-sent )
  BEGIN
    dup "#" 7 pick intostr strcat "#" strcat ( connected-RNG S-message S-Channel S-sent S-sent S-current )
    instr not if ( connected-RNG S-message S-Channel S-sent )
      "#" strcat 5 pick intostr strcat "#" strcat ( connected-RNG S-message S-Channel S-sent )
      5 pick canListen? if
        ( Is the channel Opt-In, or Opt-Out? )
        getShortName getOptStatus
        "I" strcmp not if
          getShortName getOptList ( connected-RNG S-message S-Channel S-sent S-OptList )
          "#" 7 pick intostr strcat "#" strcat ( connected-RNG S-message S-Channel S-sent S-OptList S-current )
          instr if ( connected-RNG S-message S-Channel S-sent )
            5 pick 4 pick NotifyPlayer
          then
        else ( optstatus )
          getShortName getOptList ( connected-RNG S-message S-Channel S-sent S-OptList )
          "#" 7 pick intostr strcat "#" strcat ( connected-RNG S-message S-Channel S-sent S-OptList S-current )
          instr not if ( connected-RNG S-message S-Channel S-sent )
            5 pick 4 pick NotifyPlayer
          then
        then ( optstatus )
      then ( canListen )
    then ( uniqueness test )
    5 rotate pop
    4 pick 1 - dup 5 put
    0 =
  UNTIL
  4 popn
;
 
: canTalk? ( -- bool )
  getShortName 
  dup STR-blank? if
    pop
    me @ "^FAIL^Invalid channel alias ^MOVE^'"
    command @ strcat "'^FAIL^." strcat ansi_notify
    0 exit
  then
  dup getActive
  dup STR-blank? if
    pop
    me @ "^FAIL^Channel alias ^MOVE^'" command @ strcat
    "^MOVE^'^FAIL^ is not bound to a channel." strcat ansi_notify
    0 exit
  then
  "Inactive" strcmp not if
    me @ "^FAIL^Sorry, the ^MOVE^" rot getFullName
    strcat "^FAIL^ is disabled." strcat ansi_notify
    0 exit
  then
  me @ "GUEST" flag? if
    dup getGuestTalk not if
      me @ "^FAIL^The ^MOVE^" rot getFullName strcat
      "^FAIL^ does not allow guest characters to talk." strcat ansi_notify
      0 exit
    then
  then
  me @ player? not if
   ( thing+zombie+zombieTalk is still allowed )
    me @ thing? if
      me @ "ZOMBIE" flag? if
        dup getZombieTalk not if
          me @ "^FAIL^The ^MOVE^" rot getFullName strcat
          "^FAIL^ does not allow zombie characters to talk." strcat ansi_notify
          0 exit
        then
      else
        pop
        me @ "^FAIL^Permission Denied." ansi_notify
        0 exit
      then
    else
      pop
      me @ "^FAIL^Permission Denied." ansi_notify
      0 exit
    then
  then
  dup getLevelTalk
  me @ mlevel > if
    me @ "^FAIL^Insufficient mucker/wizard level to talk on the ^MOVE^"
    rot getFullName strcat "^FAIL^." strcat ansi_notify
    0 exit
  then
  ( Someday, do group permissions here )

  ( Wow...passed all of it? )
  pop
  1
;
 
: isExpert? ( D-player -- boolean )
  "_prefs/GlowChatSystem/Expert" getpropval
;
 
: short-name-query ( S-CurrentShortName -- S-NewShortName )
  "SHORT-NAME" menu-header
  me @ isExpert? not if
    me @
    "^INFO^The short name is a unique identifier for each channel which is"
    ansi_notify
    me @
    "^INFO^displayed with each message sent by the channel and is used to identify"
    ansi_notify
    me @
    "^INFO^the channel when setting channel specific settings."
    ansi_notify
    me @ " " ansi_notify
  then
  dup STR-blank? not if
    me @
    "^INFO^The current short name is: ^MOVE^" 3 pick strcat "." strcat
    ansi_notify
  then
  me @
  "^INFO^Enter a new short name or enter a period (^MOVE^.^INFO^) by itself to"
  ansi_notify
  me @ "^INFO^keep the current one:" ansi_notify
  read
  me @ "^SUCC^" 3 pick strcat ansi_notify
  dup "." strcmp not if ( . means no change, just clean up and exit )
    pop exit
  then
  dup STR-blank? if ( "" means no change, just clean up and exit )
    pop exit
  then
  over over strcmp not if ( if they're the same, no change, just clean up and exit )
    pop exit
  then
  over STR-blank? if ( Empty string indicates this is a new channel )
    swap pop dup setChannelInactive exit
  then
  ( Check to make sure the new name doesn't exist )
  dup getActive STR-blank? not if
    me @ "^FAIL^Shortname already exists. Use remove channel first." ansi_notify
    pop
    exit
  then
  ( Channel Rename )
  ( First, update entries in the aliasdir )
  over getAliases
  dup STR-blank? not if ( Hm. Only do this if there ARE aliases )
    ";" explode ( S-OldShortName S-NewShortName Alias-RNG )
    BEGIN dup 0 = not WHILE
      dup 2 + pick 3 pick  ( S-OldShortName S-NewShortName Alias-RNG S-NewShortName S-Alias )
      bindAlias ( binds alias to the new channel name )
      swap pop 1 -
    REPEAT
    pop ( Pop the index off )
  then
  dup -3 rotate
  moveChannel not if
    me @
    "^FAIL^Move failed for a mysterious reason. Call for help. Press PANIC!"
    ansi_notify
  then
;
 
: full-name-query ( S-ShortName -- )
  "FULL-NAME" menu-header
  me @ " " ansi_notify
  dup getFullName dup STR-blank? not if
    me @ "^INFO^Current full name: ^MOVE^" rot strcat ansi_notify
  then
  me @
  "^INFO^Enter new full name for the channel or enter a period by itself to keep"
  ansi_notify
  me @
  "^INFO^the current one:"
  ansi_notify
  read
  me @ "^SUCC^" 3 pick strcat ansi_notify
  dup "." strcmp not if
    pop pop exit
  then
  dup STR-blank? if
    pop pop exit
  then
  setFullName
;
 
: alias-list-query ( S-ShortName -- )
  "ALIAS-LIST" menu-header
  me @ isExpert? not if
    me @
    "^NOTE^NOTE: When you enter an alias (or aliases) that is longer than three"
    ansi_notify
    me @
    "^NOTE^characters, shorter versions of the same alias will automatically be"
    ansi_notify
    me @
    "^NOTE^added. For example, 'public;social' will automatically become:"
    ansi_notify
    me @
    "^NOTE^public;publi;publ;pub;social;socia;soci;soc"
    ansi_notify
  then
  me @ " " ansi_notify
  dup getAliases dup STR-blank? not if
    me @ "^INFO^Current alias list: ^MOVE^" rot strcat ansi_notify
  then
  me @
  "^INFO^Enter new alias list for the channel or enter a period by itself to keep"
  ansi_notify
  me @
  "^INFO^the current one:"
  ansi_notify
  read
  me @ "^SUCC^" 3 pick strcat ansi_notify
  dup "." strcmp not if
    pop pop exit
  then
  dup STR-blank? if
    pop pop exit
  then
  ( Blow away all the old alias entries )
  over getAliases ";" explode
  BEGIN
    swap removeAlias
    1 - dup 0 =
  UNTIL
  pop
  ( Generate short versions of the alias list, setting up their entry in the )
  ( alias dir as we go )
  ";" explode ""
  BEGIN
    rot
    BEGIN
      dup -3 rotate dup 5 pick 5 + pick setAlias
      strcat ";" strcat
      swap dup strlen 1 - strcut pop
      dup strlen 3 <
    UNTIL
    pop swap 1 - swap over 0 =
  UNTIL
  swap pop
  dup strlen 1 - strcut pop
  setAliases
  ( To clean up any remove aliases, we need to rebuild the exit name )
  "gcs" DBITEM ALIASDIR nextprop ( S-aliases S-AliasProp )
  BEGIN
    dup STR-blank? not WHILE  ( S-aliases S-AliasProp )
    dup dup "/" rinstr strcut swap pop  ( S-aliases S-AliasProp S-Alias )
    rot ";" strcat swap strcat swap
    DBITEM swap nextprop
  REPEAT
  pop
  trig swap setname
;
 
: opt-query ( S-ShortName -- )
  "OPT-STATUS" menu-header
  me @ " " ansi_notify
  me @ isExpert? not if
    me @
    "^NOTE^NOTE: Opt-out means that all players are listening to the channel by"
    ansi_notify
    me @
    "^NOTE^default, and opt-in means that the the players must join before they can"
    ansi_notify
    me @
    "^NOTE^hear the channel."
    ansi_notify
  then
  me @
  "^INFO^Enter I for Opt-In, O for Opt-Out:"
  ansi_notify
  read toupper
  me @ "^SUCC^" 3 pick strcat ansi_notify
  dup "I" strcmp over "O" strcmp
  and if
    pop pop
    me @
    "^FAIL^Invalid Input. Change ignored."
    ansi_notify
    exit
  then
  setOptStatus
;
 
: id-color-query ( S-ShortName -- )
  "NID-COLOR" menu-header
  me @ " " ansi_notify
  dup getNetColor dup "" strcmp if
    "^^" "^" subst
    me @ "^INFO^Current network identifier color: ^MOVE^" rot strcat ansi_notify
  else
    pop
  then
  me @
  "^INFO^Enter new color for the network identifier or enter a period by itself"
  ansi_notify
  me @
  "^INFO^to keep the current one:"
  ansi_notify
  read
  me @ "^SUCC^" 3 pick strcat ansi_notify
  dup "." strcmp not if
    pop pop exit
  then
  dup STR-blank? if
    pop pop exit
  then
  ansi_strip "^" swap strcat "^" strcat
  setNetColor
;
 
: msg-color-query ( S-ShortName -- )
  "MSG-COLOR" menu-header
  me @ " " ansi_notify
  dup getMessageColor dup "" strcmp if
    "^^" "^" subst
    me @ "^INFO^Current message color: ^MOVE^" rot strcat ansi_notify
  else
    pop
  then
  me @
  "^INFO^Enter new color for messages or enter a period by itself to keep the"
  ansi_notify
  me @
  "^INFO^current one:"
  ansi_notify
  read
  me @ "^SUCC^" 3 pick strcat ansi_notify
  dup "." strcmp not if
    pop pop exit
  then
  dup STR-blank? if
    pop pop exit
  then
  ansi_strip "^" swap strcat "^" strcat
  setMessageColor
;
 
: status-toggle ( S-ShortName -- )
  dup getActive "Active" strcmp not if
    me @ "^SUCC^Status toggled to Inactive." ansi_notify
    setChannelInactive
  else
    me @ "^SUCC^Status toggled to Active." ansi_notify
    setChannelActive
  then
;
 
: talk-level-query ( S-ShortName -- )
  "TALK-LEVEL" menu-header
  me @ isExpert? not if
    me @ 
    "^NOTE^An m-level is the mucker or wizard level of the character. Levels 1,2,3"
    ansi_notify
    me @
    "^NOTE^correspond to M1,M2,M3 bits; Levels 4,5,6,7 correspond to the W1,W2,W3,W4 bits,"
    ansi_notify
    me @
    "^NOTE^0 is none, and 8 is #1 (the Man). 9+ would block all wizards and mortals."
    ansi_notify
  then
  dup getLevelTalk intostr
  me @ "^NOTE^Current Talk Level: ^MOVE^" rot strcat ansi_notify
  me @ "^INFO^Enter the new Talk Level:" ansi_notify
  read
  dup me @ swap "^SUCC^" swap strcat ansi_notify
  atoi
  dup 0 < if
    pop 0
  else
    dup 8 > if
      pop 8
    then
  then
  setLevelTalk
;
 
: listen-level-query ( S-ShortName -- )
  "LISTEN-LEVEL" menu-header
  me @ isExpert? not if
    me @ 
    "^NOTE^An m-level is the mucker or wizard level of the character. Levels 1,2,3"
    ansi_notify
    me @
    "^NOTE^correspond to M1,M2,M3 bits; Levels 4,5,6,7 correspond to the W1,W2,W3,W4 bits,"
    ansi_notify
    me @
    "^NOTE^0 is none, and 8 is #1 (the Man). 9+ would block all wizards and mortals."
    ansi_notify
  then
  dup getLevelListen intostr
  me @ "^NOTE^Current Listen Level: ^MOVE^" rot strcat ansi_notify
  me @ "^INFO^Enter the new Listen Level:" ansi_notify
  read
  dup me @ swap "^SUCC^" swap strcat ansi_notify
  atoi
  dup 0 < if
    pop 0
  else
    dup 8 > if
      pop 8
    then
  then
  setLevelListen
;
 
( channel-editor: menu for editing general channel settings )
: menu-channel-permissions ( S-ShortName -- )
  BEGIN
    "CHANNEL-EDIT" menu-header
    " ^INFO^1. ^WHITE^Guests can Talk:            ^MOVE^"
    2 pick getGuestTalk if
      "Yes"
    else
      "No"
    then
    strcat
    " ^INFO^2. ^WHITE^Guests can Listen:          ^MOVE^"
    3 pick getGuestListen if
      "Yes"
    else
      "No"
    then
    strcat
    " ^INFO^3. ^WHITE^Zombies can Talk:           ^MOVE^"
    4 pick getZombieTalk if
      "Yes"
    else
      "No"
    then
    strcat
    " ^INFO^4. ^WHITE^Zombies can Listen:         ^MOVE^"
    5 pick getZombieListen if
      "Yes"
    else
      "No"
    then
    strcat
    " ^INFO^5. ^WHITE^Required M-Level to Talk:   ^MOVE^"
    6 pick getLevelTalk intostr strcat
    " ^INFO^6. ^WHITE^Required M-Level to Listen: ^MOVE^"
    7 pick getLevelListen intostr strcat
    " ^INFO^Q. ^WHITE^Quit Menu"
    " ^INFO^E. ^WHITE^Exit Menu System"
    8 EDIT-ansi_display
    read tolower
    case
      "q" strcmp not when
        me @ "^SUCC^Channel Permissions Editor Exited." ansi_notify     
        0 exit
      end
      "e" strcmp not when
        me @ "^SUCC^Channel Permissions Editor Exited." ansi_notify
        1 exit
      end
      "1" strcmp not when dup toggleGuestTalk 0 end
      "2" strcmp not when dup toggleGuestListen 0 end
      "3" strcmp not when dup toggleZombieTalk 0 end
      "4" strcmp not when dup toggleZombieListen 0 end
      "5" strcmp not when dup talk-level-query 0 end
      "6" strcmp not when dup listen-level-query 0 end
      default pop me @ "^FAIL^Invalid Option!" ansi_notify 0 end
    endcase
  UNTIL
  pop 0
  me @ "^SUCC^Channel Permissions Editor Exited." ansi_notify
; 
 
( channel-editor: menu for editing general channel settings )
: channel-editor ( S-ShortName -- )
  BEGIN
    "CHANNEL-EDIT" menu-header
    " ^INFO^1. ^WHITE^Channel Short Name:    ^MOVE^"
    2 pick strcat
    " ^INFO^2. ^WHITE^Channel Full Name:     ^MOVE^"
    3 pick getFullName strcat
    " ^INFO^3. ^WHITE^Channel Aliases:       ^MOVE^"
    4 pick getAliases strcat
    " ^INFO^4. ^WHITE^Opt-In/Opt-Out:        ^MOVE^"
    5 pick getOptStatus strcat
    " ^INFO^5. ^WHITE^Network ID Color:      ^MOVE^"
    6 pick getNetColor "^^" "^" subst
    strcat
    " ^INFO^6. ^WHITE^Network Message Color: ^MOVE^"
    7 pick getMessageColor "^^" "^" subst
    strcat
    " ^INFO^7. ^WHITE^Channel Status:        ^MOVE^"
    8 pick getActive strcat
    " ^INFO^8. ^WHITE^Edit Permissions"
    " ^INFO^9. ^WHITE^Edit Optee List"
    " ^INFO^Q. ^WHITE^Quit Menu"
    " ^INFO^E. ^WHITE^Exit Menu System"
    11 EDIT-ansi_display
    read tolower
    case
      "q" strcmp not when exit end
      "e" strcmp not when
        me @ "^SUCC^Channel Editor Exited." ansi_notify
        exit
      end
      "1" strcmp not when short-name-query 0 end
      3 pick STR-blank? not if
        "2" strcmp not when dup full-name-query 0 end
        "3" strcmp not when dup alias-list-query 0 end
        "4" strcmp not when dup opt-query 0 end
        "5" strcmp not when dup id-color-query 0 end
        "6" strcmp not when dup msg-color-query 0 end
        "7" strcmp not when dup status-toggle 0 end
        "8" strcmp not when dup menu-channel-permissions end
      then
      default pop me @ "^FAIL^Invalid Option!" ansi_notify 0 end
    endcase
  UNTIL
  pop
  me @ "^SUCC^Channel Editor Exited." ansi_notify
; 
  
: joinChannel ( -- )
  getShortName dup getOptStatus
  "I" strcmp not if
    dup getOptList me @ intostr "#" swap strcat "#" strcat
    over over instr if
      pop pop pop
    	me @ "^FAIL^You have already joined that channel." ansi_notify
   	else
   	  strcat setOptList
      me @
      "^SUCC^You join the ^MOVE^" getShortName getFullName strcat
      "^SUCC^." strcat
      ansi_notify
    then
  else
    dup getOptList me @ intostr "#" swap strcat "#" strcat
    over over instr if
      "" swap subst setOptList
      me @
      "^SUCC^You join the ^MOVE^" getShortName getFullName strcat
      "^SUCC^." strcat
      ansi_notify
    else
      pop pop pop
      me @ "^FAIL^You have already joined that channel." ansi_notify
    then  
  then
;

: main
  dup STR-blank? if
    pop print-help exit
  then
  dup STR-command dup "" strcmp not if
    pop
    canTalk? if
      Talk ( output to appropiate channel )
    else
      pop
    then
    exit
  then
  swap pop
  STR-splitargs swap
  dup "help" strcmp not if
    pop pop print-help exit
  then
  dup "add" strcmp not if
    pop pop
    me @ "MAGE" flag? if
      ""
      channel-editor
    else
      print-help
    then
    exit
  then
  dup "edit" strcmp not if
    pop
    me @ "MAGE" flag? if
      dup STR-blank? if
        pop getShortName
      then
      channel-editor
      pop
    else
      pop print-help
    then
    exit
  then
  dup "join" strcmp not if
    pop pop
    joinChannel
    exit
  then
  pop
  print-help
;
.
c
q
@register cmd-glow-chat-system=cmd/glow-chat-system
