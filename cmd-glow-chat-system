wh me=Beginning installation of cmd-glow-chat-system
@prog cmd-glow-chat-system
1 99999 d
1 i
( cmd-chat-system: $Date: 2012/04/22 13:30:50 $ $Revision: 1.37 $             )
( Purpose: Provides a muckwide chat network                                   )
( Author: Feaelin Moilar                                                      )
( Contributors:                                                               )
( Dependencies: lib-strings, lib-edit, lib-case, lib-lmgr, lib-match          )
( --------------------------------------------------------------------------- )
(
  TODO: There may be a stack error surrounding the 'allow list' stuff.
        Go into the menu and toggle the 'use allow list' option once or twice
        then exit the system.
        * Make timestamping optional for the viewer
        * Make timestamp format string configurable by the viewer
        * Allow viewer to turn off announcements any of the 4
        * Allow viewer to customize the colors to their own taste
        * Easier Color Selection?
        * Checkconfiguration should check for the connect/disconnect props
)
(
  $Log: cmd-glow-chat-system,v $
  Revision 1.37  2012/04/22 13:30:50  feaelin
  Added word to check on the configuration settings
  Such as the registry entry and basic command presence.

  Revision 1.36  2012/04/22 13:18:47  feaelin
  Fixed autoOnOff from executing if connecting connection is a duplicate.
  Added configuration check for the $chat/chatobject registry entry.
 
  Revision 1.35  2012/04/22 13:01:53  feaelin
  Added the auto on or auto off feature.
 
  Revision 1.34  2012/04/21 21:17:25  feaelin
  Tighted code in connectAnnouncement
 
  Revision 1.33  2011/07/06 16:15:50  feaelin
  Added timestamps to the output.
 
  Revision 1.32  2011/03/08 18:45:44  feaelin
  Completed /list. It now shows the channel short name and talk ability of
  user.
 
  Revision 1.31  2011/03/01 01:33:27  feaelin
  Added list based access for channels.
 
  Revision 1.30  2011/02/27 18:40:02  feaelin
  Started the /list command
 
  Revision 1.29  2010/08/19 12:31:08  Feaelin
  Refactored whoChannelHelper so that it accepts an address of the
  printWhoLine word/function to be used. In later iterations, this will allow
  for different printWhoLine functions to be used depending on what output we
  want.
 
  Revision 1.28  2010/08/19 12:16:36  Feaelin
  Refactored /who so that I can use the internal code for the version of /who
  that reports on all channels.
 
  Revision 1.27  2010/08/19 12:06:17  Feaelin
  Cleaned up the column sizes for /who.
 
  Revision 1.26  2009/09/29 18:32:29  feaelin
  Added a strip so that . /help worked correctly.
 
  Revision 1.25  2009/05/24 16:18:04  feaelin
  Cleaned up some of the help displays
 
  Revision 1.24  2009/05/20 17:20:54  feaelin
  Fixed print-help output problem.
  Adjusted so that the code strips leading spaces.
 
  Revision 1.23  2009/05/20 16:23:06  feaelin
  Needs to be W3 to support @aliases
 
  Revision 1.22  2009/05/20 16:03:58  feaelin
  Fixed issue with disconnect...it was missing a getShortName
 
  Revision 1.21  2009/05/20 15:30:51  feaelin
  Eh. greater than 1, not less than 2.
 
  Revision 1.20  2009/05/20 15:27:08  feaelin
  Removed enter/leave from help still exist as aliases of join/unjoin
  Changed announceDisconnect so that it only announces if number
  of connections for the dbref is < 2.
 
  Revision 1.19  2009/05/20 15:24:02  feaelin
  Added on/off as aliases of join/unjoin
 
  Revision 1.18  2009/05/18 22:42:44  feaelin
  Oops. connect announcement now actually checks if the
  player is listening before announcing there connect on a channel.
 
  Revision 1.17  2009/05/18 22:24:32  feaelin
  Add announcements of join/ujoin/connect/disconnect
  Fixed bug where capitals after emote would despace
 
  Revision 1.16  2009/05/13 20:23:02  feaelin
  Refactored NotifyPlayer so that it works with the buildMessage function
 
  Revision 1.15  2009/05/13 18:13:14  feaelin
  Completed logMessage
  Added buildMessage, a more generic function to build the message string.
 
  Revision 1.14  2009/05/13 16:01:40  feaelin
  Moved color editing to its own menu.
 
  Revision 1.13  2009/05/05 15:43:14  feaelin
  Revised help so that it has a 'basic' version for the
  non-channel specific commands
 
  Revision 1.12  2009/05/04 19:01:15  feaelin
  Updated /who to show who can talk
  Refactored canTalk? to return "" or error and be generic
 
  Revision 1.11  2009/05/03 18:49:18  feaelin
  Updated menu header
 
  Revision 1.10  2009/05/03 18:47:17  feaelin
  Updated help.
 
  Revision 1.9  2009/05/03 18:43:51  feaelin
  color codes in upper case
 
  Revision 1.8  2009/05/03 18:09:06  feaelin
  /who added
 
  Revision 1.7  2009/05/01 23:09:24  feaelin
  Updated help.
 
  Revision 1.6  2009/04/30 01:26:37  feaelin
  Added /join to channel.
 
  Revision 1.5  2009/04/28 18:21:27  feaelin
  Added permissions editor; support for yes/no permissions done.
 
  Revision 1.4  2009/04/28 17:15:13  feaelin
  Removed vestigial prompted channel edit
  Added code to channel editor so that the exit name/alias list is updated.
 
  Revision 1.3  2009/04/28 16:55:54  feaelin
  Completed add menu.
 
  Revision 1.2  2009/04/26 14:29:53  feaelin
  Fixed various installer script issues caused by the rename.
 
  Revision 1.1  2009/04/26 14:25:08  feaelin
  Initial revision

)
( --------------------------------------------------------------------------- )
 
$include $lib/strings
$include $lib/edit
$include $lib/case
$include $lib/lmgr
$include $lib/mv-cp
$include $lib/match
 
$def CHANNELDIR "/Channels/"
$def ALIASDIR   "/Aliases/"
$def ALPHACHARS "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
$def SYSTEMMARKER "(System Announcement)"
 
: DBITEM
  trig dup #-1 dbcmp if
    pop "$chat/chatobject" match
  then
;
 
: getNetSeparator ( -- S-Separator )
  DBITEM "/NetSeparator" getpropstr
;
 
: getShortName ( S-Alias -- S-ShortName )
  DBITEM ALIASDIR command @ strcat getpropstr
;
 
: moveChannel ( S-ShortName S-NewShortName -- bool )
  "/Channels/" swap strcat
  swap
  "/Channels/" swap strcat swap
  DBITEM -3 rotate DBITEM swap MVCP-move-prop
;
 
: bindAlias ( S-ShortName S-Alias )
  DBITEM ALIASDIR rot strcat rot setprop
;
 
: getActive ( S-ShortName -- S-Active )
  dup STR-blank? if
    pop "" exit
  then
  DBITEM CHANNELDIR rot strcat getpropstr
;
 
: setChannelActive ( S-ShortName -- )
  DBITEM CHANNELDIR rot strcat "Active" setprop
;
 
: setChannelInActive ( S-ShortName -- )
  DBITEM CHANNELDIR rot strcat "Inactive" setprop
;
 
: getFullName ( S-ShortName -- S-FullName )
  DBITEM CHANNELDIR rot strcat "/Name" strcat getpropstr
;
 
: setFullName ( S-ShortName S-FullName -- )
  swap CHANNELDIR swap strcat "/Name" strcat
  DBITEM swap rot setprop
;
 
: getAliases ( S-ShortName -- S-AliasList )
  DBITEM CHANNELDIR rot strcat "/Aliases" strcat getpropstr
;
 
: setAliases ( S-ShortName S-Aliases -- )
  swap CHANNELDIR swap strcat "/Aliases" strcat
  DBITEM swap rot setprop
;
 
: setAlias ( S-Alias S-ShortName -- )
  DBITEM ALIASDIR 4 rotate strcat rot setprop
;
 
: removeAlias ( S-Alias -- )
  dup STR-blank? if
    pop exit
  then
  DBITEM swap ALIASDIR swap strcat remove_prop
;
 
: getUseAllowedPlayerList ( S-ShortName -- S-Status )
  DBITEM CHANNELDIR rot strcat "/UseAllowedPlayerList" strcat getpropval
;
 
: toggleUseAllowedPlayerList ( S-ShortName -- )
  CHANNELDIR swap strcat "/UseAllowedPlayerList" strcat 
  dup DBITEM swap getpropval if
    DBITEM swap 0 setprop
  else
    DBITEM swap 1 setprop
  then
;
 
: getAllowedPlayersString ( S-ShortName -- S-Names )
  CHANNELDIR swap strcat "/AllowedPlayerList/" strcat
  DBITEM swap nextprop
  dup STR-blank? if
    pop
    "<Empty>"
  else
    "" swap
    BEGIN
      dup "/" STR-rsplit swap pop atoi dbref name 
      rot swap strcat ", " strcat swap
      DBITEM swap nextprop dup STR-blank?
    UNTIL
    pop dup strlen 2 - strcut pop
  then
  " ^INFO^List: ^MOVE^" swap strcat
;
 
: addAllowedPlayer ( S-ShortName D-PlayerRef -- )
  DBITEM CHANNELDIR rot strcat
  "/AllowedPlayerList/" strcat
  3 rotate int intostr strcat 1 setprop
;
 
: removeAllowedPlayer ( S-ShortName D-PlayerRef -- )
  DBITEM CHANNELDIR rot strcat
  "/AllowedPlayerList/" strcat
  3 rotate int intostr strcat remove_prop
;
 
: getAutoOnOffMode ( S-ShortName -- S-OptStatus )
  DBITEM CHANNELDIR rot strcat "/AutoOnOffMode" strcat getpropval
;
 
: toggleAutoOnOffMode ( S-ShortName -- )
  CHANNELDIR swap strcat "/AutoOnOffMode" strcat 
  dup DBITEM swap getpropval dup 0 = if
    pop DBITEM swap 1 setprop
  else
    1 = if
      DBITEM swap 2 setprop
    else
      DBITEM swap 0 setprop
    then
  then
;
 
: modeToDescription ( I-Mode -- S-ModeDescription )
  dup 0 = if
    pop "None"
  else
    1 = if
      "Auto Off"
    else
      "Auto On"
    then
  then
;
 
: getOptStatus ( S-ShortName -- S-OptStatus )
  DBITEM CHANNELDIR rot strcat "/OptInOut" strcat getpropstr
;
 
: setOptStatus ( S-ShortName S-OptStatus -- )
  swap CHANNELDIR swap strcat "/OptInOut" strcat
  DBITEM swap rot setprop
;
 
: getNetColor ( S-ShortName -- S-NetColor )
  DBITEM CHANNELDIR rot strcat "/NetColor" strcat getpropstr
;
 
: setNetColor ( S-ShortName S-NetColor -- )
  swap CHANNELDIR swap strcat "/NetColor" strcat
  DBITEM swap rot setprop
;
 
: getMessageColor ( S-ShortName -- S-MessageColor )
  DBITEM CHANNELDIR rot strcat "/MessageColor" strcat getpropstr
;
 
: setMessageColor ( S-ShortName S-MessageColor -- )
  swap CHANNELDIR swap strcat "/MessageColor" strcat
  DBITEM swap rot setprop
;
 
: getSayMessageColor ( S-ShortName -- S-SayMessageColor )
  DBITEM CHANNELDIR rot strcat "/SayMessageColor" strcat getpropstr
;
 
: setSayMessageColor ( S-ShortName S-SayMessageColor -- )
  swap CHANNELDIR swap strcat "/SayMessageColor" strcat
  DBITEM swap rot setprop
;
 
: getGuestTalk ( S-ShortName -- B-GuestTalk )
  DBITEM CHANNELDIR rot strcat "/GuestTalk" strcat getpropval
;
 
: toggleGuestTalk ( S-ShortName -- )
  CHANNELDIR swap strcat "/GuestTalk" strcat 
  dup DBITEM swap getpropval if
    DBITEM swap 0 setprop
  else
    DBITEM swap 1 setprop
  then
;
 
: getGuestListen ( S-ShortName -- B-GuestListen )
  DBITEM CHANNELDIR rot strcat "/GuestListen" strcat getpropval
;
 
: toggleGuestListen ( S-ShortName -- )
  CHANNELDIR swap strcat "/GuestListen" strcat 
  dup DBITEM swap getpropval if
    DBITEM swap 0 setprop
  else
    DBITEM swap 1 setprop
  then
;
 
: getZombieTalk ( S-ShortName -- B-ZombieTalk )
  DBITEM CHANNELDIR rot strcat "/ZombieTalk" strcat getpropval
;
 
: toggleZombieTalk ( S-ShortName -- )
  CHANNELDIR swap strcat "/ZombieTalk" strcat 
  dup DBITEM swap getpropval if
    DBITEM swap 0 setprop
  else
    DBITEM swap 1 setprop
  then
;
 
: getZombieListen ( S-ShortName -- B-ZombieListen )
  DBITEM CHANNELDIR rot strcat "/ZombieListen" strcat getpropval
;
 
: toggleZombieListen ( S-ShortName -- )
  CHANNELDIR swap strcat "/ZombieListen" strcat 
  dup DBITEM swap getpropval if
    DBITEM swap 0 setprop
  else
    DBITEM swap 1 setprop
  then
;
 
: getLevelTalk ( S-ShortName -- I-LevelListen )
  DBITEM CHANNELDIR rot strcat "/LevelTalk" strcat getpropval
;
 
: setLevelTalk ( S-ShortName I-LevelTalk -- )
  swap CHANNELDIR swap strcat "/LevelTalk" strcat
  DBITEM swap rot setprop
;
 
: getLevelListen ( S-ShortName -- I-LevelListen )
  DBITEM CHANNELDIR rot strcat "/LevelListen" strcat getpropval
;
 
: setLevelListen ( S-ShortName I-LevelListen -- )
  swap CHANNELDIR swap strcat "/LevelListen" strcat
  DBITEM swap rot setprop
;
 
: getOptList ( S-ShortName -- S-OptList )
  DBITEM CHANNELDIR rot strcat "/OptList" strcat getpropstr
;
 
: setOptList ( S-ShortName S-OptList -- )
  swap CHANNELDIR swap strcat "/OptList" strcat
  DBITEM swap rot setprop
;
 
: getAnnounceJoin ( S-ShortName -- B-AnnounceJoin )
  DBITEM CHANNELDIR rot strcat "/AnnounceJoin" strcat getpropval
;
 
: toggleAnnounceJoin ( S-ShortName -- )
  CHANNELDIR swap strcat "/AnnounceJoin" strcat 
  dup DBITEM swap getpropval if
    DBITEM swap 0 setprop
  else
    DBITEM swap 1 setprop
  then
;
 
: getAnnounceUnjoin ( S-ShortName -- B-AnnounceUnjoin )
  DBITEM CHANNELDIR rot strcat "/AnnounceUnjoin" strcat getpropval
;
 
: toggleAnnounceUnjoin ( S-ShortName -- )
  CHANNELDIR swap strcat "/AnnounceUnjoin" strcat 
  dup DBITEM swap getpropval if
    DBITEM swap 0 setprop
  else
    DBITEM swap 1 setprop
  then
;
 
: getAnnounceConnect ( S-ShortName -- B-AnnounceConnect )
  DBITEM CHANNELDIR rot strcat "/AnnounceConnect" strcat getpropval
;
 
: toggleAnnounceConnect ( S-ShortName -- )
  CHANNELDIR swap strcat "/AnnounceConnect" strcat 
  dup DBITEM swap getpropval if
    DBITEM swap 0 setprop
  else
    DBITEM swap 1 setprop
  then
;
 
: getAnnounceDisconnect ( S-ShortName -- B-AnnounceDisconnect )
  DBITEM CHANNELDIR rot strcat "/AnnounceDisconnect" strcat getpropval
;
 
: toggleAnnounceDisconnect ( S-ShortName -- )
  CHANNELDIR swap strcat "/AnnounceDisconnect" strcat 
  dup DBITEM swap getpropval if
    DBITEM swap 0 setprop
  else
    DBITEM swap 1 setprop
  then
;
 
: isListening? ( D-player S-ShortName -- )
  dup getOptStatus "I" strcmp not if
    getOptList swap intostr "#" swap strcat "#" strcat instr
  else
    getOptList swap intostr "#" swap strcat "#" strcat instr not
  then
;
 
: menu-header ( S-MenuName -- )
  24 strcut pop
  "^WHITE^------------------------------------------------------------------------^RESET^"
  "^GREEN^  GLORIA: Glow Chat System                                ^FOREST^" 
  "$Revision: 1.37 $" 1 strcut swap pop dup strlen 1 - strcut pop strcat
  ": ^YELLOW^" ": " subst
  "^FOREST^  By Feaelin Moilar (Iain E. Davis)             ^YELLOW^"
  4 rotate dup strlen 24 swap - "                   " 
  swap strcut pop swap strcat strcat "^RESET^" strcat
  "^WHITE^------------------------------------------------------------------------^RESET^"
  4 EDIT-ansi_display
;
 
: print-short-help ( -- )
  "SHORT-HELP" menu-header
  "gloria /list           Lists channels you have access to."
  "gloria /who            Lists players listening to channels you can hear."
  me @ "MAGE" flag? if
    "gloria /add            Adds a channel to the system."
    "<channelcommand> /edit Edit a channel that already exists."
    4 EDIT-ansi_display
  else
    2 EDIT-ansi_display
  then  
;
 
: print-help ( -- )
  getShortName STR-blank? if
    print-short-help exit
  then
  "HELP" menu-header
  getShortName   " <message>        'says' <message> on the channel." strcat
  getShortName   " :<message>       emotes <message> on the channel." strcat
  getShortName   " /who             Lists players listening to the channel."
  strcat
  getShortName   " /join            Begins listening on the channel." strcat
  getShortName   " /unjoin          Stops listening on the channel." strcat
  me @ "MAGE" flag? if
    getShortName " /add             Adds a channel to the system." strcat
    getShortName " /edit            Edits the channel." strcat
    getShortName " /remove          Removes a channel from the system." strcat
    8 EDIT-ansi_display
  else
    5 EDIT-ansi_display
  then
;
 
: buildMessage ( B-NormalMessage? S-BaseMessage -- S-Message )
  dup 1 strcut pop
  ":;" swap  instr if ( If emote? )
    1 strcut swap pop
    dup 1 strcut pop
    ALPHACHARS swap instr if ( If alphanumeric )
      " " swap strcat
    then ( If Alphanumeric )
    swap if ( name prepend )
      me @ name swap strcat
    then ( name prepend )
    "^MESSAGECOLOR^" swap strcat
  else ( If emote?..in this case, it isn't )
    swap pop
    "^MESSAGECOLOR^" me @ name strcat " says, \"^SAYMESSAGECOLOR^"
    strcat swap strcat
    "^MESSAGECOLOR^\"" strcat
  then
;
 
: logMessage ( S-Message -- )
  ( Substitute the netseparator with the netseparator plus the
  ( player's dbref )
  getNetSeparator getNetSeparator
  " (^YELLOW^#" me @ intostr strcat "^MESSAGECOLOR^) " strcat strcat subst
  ( Fill in the message colors )
  getShortName getMessageColor "^MESSAGECOLOR^" subst
  getShortName getSayMessageColor "^SAYMESSAGECOLOR^" subst
  ( Store it to the log. )
  CHANNELDIR getShortName strcat "/Log" strcat
  dup DBITEM LMGR-getcount
  1 + swap DBITEM LMGR-PutElem
;
 
: NotifyPlayer ( D-player S-message -- )
  getShortName getNetColor getShortName strcat 
  getNetSeparator strcat
  " " strcat
  "%Y-%b-%d %X" systime timefmt strcat ": " strcat
  swap strcat
  getShortName getMessageColor "^MESSAGECOLOR^" subst
  getShortName getSayMessageColor "^SAYMESSAGECOLOR^" subst
  ansi_notify
;
 
: canListen? ( D-player  -- bool )
  dup "GUEST" flag? if
    getShortName getGuestListen not if
      pop 0 exit
    then
  then
  dup player? not if
   ( thing+zombie+zombie is still allowed )
    dup thing? if
      dup "ZOMBIE" flag? if
        getShortName getZombieListen not if
          pop 0 exit
        then
      else
        pop 0 exit
      then
    else
      pop 0 exit
    then
  then
  getShortName getLevelListen
  over mlevel > if
    pop 0 exit
  then
  ( Allowed by List? )
  getShortName getUseAllowedPlayerList if
    DBITEM CHANNELDIR getShortName strcat "/AllowedPLayerList/" strcat
    me @ int intostr strcat getpropval if pop 1 exit else pop 0 exit then
  then
  pop 1
;
 
: Talk ( S-message -- )
  1 over buildMessage dup logMessage 
  online dup 2 + rotate ( connected-RNG S-message )
  getShortName "" ( connected-RNG S-message S-Channel S-sent )
  BEGIN
    dup "#" 7 pick intostr strcat "#" strcat
    ( connected-RNG S-message S-Channel S-sent S-sent S-current )
    instr not if
      ( connected-RNG S-message S-Channel S-sent )
      "#" strcat 5 pick intostr strcat "#" strcat
      ( connected-RNG S-message S-Channel S-sent )
      5 pick canListen? if
        ( Is the channel Opt-In, or Opt-Out? )
        getShortName getOptStatus
        "I" strcmp not if
          getShortName getOptList
          ( connected-RNG S-message S-Channel S-sent S-OptList )
          "#" 7 pick intostr strcat "#" strcat
          ( connected-RNG S-message S-Channel S-sent S-OptList S-current )
          instr if ( connected-RNG S-message S-Channel S-sent )
            5 pick 4 pick NotifyPlayer
          then
        else ( optstatus )
          getShortName getOptList
          ( connected-RNG S-message S-Channel S-sent S-OptList )
          "#" 7 pick intostr strcat "#" strcat
          ( connected-RNG S-message S-Channel S-sent S-OptList S-current )
          instr not if ( connected-RNG S-message S-Channel S-sent )
            5 pick 4 pick NotifyPlayer
          then
        then ( optstatus )
      then ( canListen )
    then ( uniqueness test )
    5 rotate pop
    4 pick 1 - dup 5 put
    0 =
  UNTIL
  5 popn
;
 
: maybeJoinNotify ( B-Noisy -- )
  if ( b-noisy )
    getShortName getAnnounceUnjoin if
      ":joins the " getShortName getFullName strcat
      ". " getShortName getNetColor strcat SYSTEMMARKER strcat strcat
      Talk
    else
      me @
      "^SUCC^You join the ^MOVE^" getShortName getFullName strcat
      "^SUCC^." strcat
      ansi_notify
    then
  then
;
 
: maybeJoinFailNotify ( B-Noisy s-junk s-junk s-junk -- )
  3 popn
  if
    me @ "^FAIL^You have already joined that channel." ansi_notify
  then
;
 
: joinChannel ( B-Noisy -- )
  me @ canListen? if
    getShortName
    dup getOptList

   ( #dbref#, so list: #dbref##dbref# ... )
   me @ intostr "#" swap strcat "#" strcat
  
   3 pick getOptStatus
   "I" strcmp not if ( Opt-In Channel, add to list )
     over over instr if
       maybeJoinFailNotify
     else
       strcat setOptList
       maybeJoinNotify
     then
   else ( opt-out channel, remove from list )
     over over instr if
       "" swap subst
       maybeJoinNotify
     else
       maybeJoinFailNotify
     then
   then
  else ( can't listen )
    if ( b-noisy )
      me @ "^FAIL^You have insufficient permissions to listen to that channel."
      ansi_notify
    then
  then ( canListen? )
;
 
: maybeRemovalNotify ( B-Noisy -- )
  if ( b-noisy )
    getShortName getAnnounceUnjoin if
      ":leaves the " getShortName getFullName strcat
      ". " getShortName getNetColor strcat SYSTEMMARKER strcat strcat
      Talk
    else
      me @
      "^SUCC^You leave the ^MOVE^" getShortName getFullName strcat
      "^SUCC^." strcat
      ansi_notify
    then
  then
;
 
: maybeRemovalFailNotify ( B-Noisy s-junk s-junk s-junk -- )
  3 popn
  if
    me @ "^FAIL^You're already not a member of that channel." ansi_notify
  then
;
 
( Actually perform the removal of a player from a channel )
: unJoinChannel ( B-Noisy -- )
  getShortName
  dup getOptList

  ( #dbref#, so list: #dbref##dbref# ... )
  me @ intostr "#" swap strcat "#" strcat

  3 pick getOptStatus
  "O" strcmp not if ( Opt out channel, so we add to the opter-outer to the list )
    over over instr if
      maybeRemovalFailNotify
    else
      4 rotate maybeRemovalNotify
      strcat setOptList
    then
  else ( Opt in channel, so we remove the opter-outer from the list )
    over over instr if
      4 rotate maybeRemovalNotify
      "" swap subst setOptList
    else
      maybeRemovalFailNotify
    then
  then
;
 
( Either returns "" if okay, or an errormessage if not )
: canTalk? ( D-Player -- S-ErrorMessage )
  dup canListen? not if
    pop
    "^FAIL^Insufficient permissions to listen, therefore cannot talk."
    exit
  then
  getShortName
  dup STR-blank? if
    pop pop
    "^FAIL^Invalid channel alias ^MOVE^'"
    command @ strcat "'^FAIL^." strcat
    exit
  then
  dup getActive
  dup STR-blank? if
    3 popn
    "^FAIL^Channel alias ^MOVE^'" command @ strcat
    "^MOVE^'^FAIL^ is not bound to a channel." strcat
    exit
  then
  "Inactive" strcmp not if
    swap pop
    "^FAIL^Sorry, the ^MOVE^" swap getFullName
    strcat "^FAIL^ is disabled." strcat
    exit
  then
  over "GUEST" flag? if
    dup getGuestTalk not if
      pop pop
      "^FAIL^The ^MOVE^" rot getFullName strcat
      "^FAIL^ does not allow guest characters to talk." strcat
      exit
    then
  then
  over player? not if
   ( thing+zombie+zombieTalk is still allowed )
    over thing? if
      over "ZOMBIE" flag? if
        dup getZombieTalk not if
          pop pop
          "^FAIL^The ^MOVE^" rot getFullName strcat
          "^FAIL^ does not allow zombie characters to talk." strcat
          exit
        then
      else
        pop pop
        "^FAIL^Permission Denied."
        exit
      then
    else
      pop pop
      "^FAIL^Permission Denied."
      exit
    then
  then
  dup getLevelTalk
  3 pick mlevel > if
    "^FAIL^Insufficient mucker/wizard level to talk on the ^MOVE^"
    swap getFullName strcat "^FAIL^." strcat
    swap pop
    exit
  then
  ( Wow...passed all of it? )
  pop pop
  ""
;
 
: isExpert? ( D-player -- boolean )
  "_prefs/GlowChatSystem/Expert" getpropval
;
 
: short-name-query ( S-CurrentShortName -- S-NewShortName )
  "SHORT-NAME" menu-header
  me @ isExpert? not if
    me @
    "^INFO^The short name is a unique identifier for each channel which is"
    ansi_notify
    me @
    "^INFO^displayed with each message sent by the channel and is used to identify"
    ansi_notify
    me @
    "^INFO^the channel when setting channel specific settings."
    ansi_notify
    me @ " " ansi_notify
  then
  dup STR-blank? not if
    me @
    "^INFO^The current short name is: ^MOVE^" 3 pick strcat "." strcat
    ansi_notify
  then
  me @
  "^INFO^Enter a new short name or enter a period (^MOVE^.^INFO^) by itself to"
  ansi_notify
  me @ "^INFO^keep the current one:" ansi_notify
  read
  me @ "^SUCC^" 3 pick strcat ansi_notify
  dup "." strcmp not if ( . means no change, just clean up and exit )
    pop exit
  then
  dup STR-blank? if ( "" means no change, just clean up and exit )
    pop exit
  then
  ( if they're the same, no change, just clean up and exit )
  over over strcmp not if
    pop exit
  then
  over STR-blank? if ( Empty string indicates this is a new channel )
    swap pop dup setChannelInactive exit
  then
  ( Check to make sure the new name doesn't exist )
  dup getActive STR-blank? not if
    me @ "^FAIL^Shortname already exists. Use remove channel first." ansi_notify
    pop
    exit
  then
  ( Channel Rename )
  ( First, update entries in the aliasdir )
  over getAliases
  dup STR-blank? not if ( Hm. Only do this if there ARE aliases )
    ";" explode ( S-OldShortName S-NewShortName Alias-RNG )
    BEGIN dup 0 = not WHILE
      dup 2 + pick 3 pick
      ( S-OldShortName S-NewShortName Alias-RNG S-NewShortName S-Alias )
      bindAlias ( binds alias to the new channel name )
      swap pop 1 -
    REPEAT
    pop ( Pop the index off )
  then
  dup -3 rotate
  moveChannel not if
    me @
    "^FAIL^Move failed for a mysterious reason. Call for help. Press PANIC!"
    ansi_notify
  then
;
 
: full-name-query ( S-ShortName -- )
  "FULL-NAME: " getShortName strcat menu-header
  me @ " " ansi_notify
  dup getFullName dup STR-blank? not if
    me @ "^INFO^Current full name: ^MOVE^" rot strcat ansi_notify
  else
    pop
  then
  me @
  "^INFO^Enter new full name for the channel or enter a period by itself to keep"
  ansi_notify
  me @
  "^INFO^the current one:"
  ansi_notify
  read
  me @ "^SUCC^" 3 pick strcat ansi_notify
  dup "." strcmp not if
    pop pop exit
  then
  dup STR-blank? if
    pop pop exit
  then
  setFullName
;
 
: alias-list-query ( S-ShortName -- )
  "ALIAS-LIST: " getShortName strcat menu-header
  me @ isExpert? not if
    me @
    "^NOTE^NOTE: When you enter an alias (or aliases) that is longer than three"
    ansi_notify
    me @
    "^NOTE^characters, shorter versions of the same alias will automatically be"
    ansi_notify
    me @
    "^NOTE^added. For example, 'public;social' will automatically become:"
    ansi_notify
    me @
    "^NOTE^public;publi;publ;pub;social;socia;soci;soc"
    ansi_notify
  then
  me @ " " ansi_notify
  dup getAliases dup STR-blank? not if
    me @ "^INFO^Current alias list: ^MOVE^" rot strcat ansi_notify
  else
    pop
  then
  me @
  "^INFO^Enter new alias list for the channel or enter a period by itself to keep"
  ansi_notify
  me @
  "^INFO^the current one:"
  ansi_notify
  read
  me @ "^SUCC^" 3 pick strcat ansi_notify
  dup "." strcmp not if
    pop pop exit
  then
  dup STR-blank? if
    pop pop exit
  then
  ( Blow away all the old alias entries )
  over getAliases ";" explode
  BEGIN
    swap removeAlias
    1 - dup 0 =
  UNTIL
  pop
  ( Generate short versions of the alias list, setting up their entry in the )
  ( alias dir as we go )
  ";" explode ""
  BEGIN
    rot
    BEGIN
      dup -3 rotate dup 5 pick 5 + pick setAlias
      strcat ";" strcat
      swap dup strlen 1 - strcut pop
      dup strlen 3 <
    UNTIL
    pop swap 1 - swap over 0 =
  UNTIL
  swap pop
  dup strlen 1 - strcut pop
  setAliases
  ( To clean up any remove aliases, we need to rebuild the exit name )
  "gcs;gloria" DBITEM ALIASDIR nextprop ( S-aliases S-AliasProp )
  BEGIN
    dup STR-blank? not WHILE  ( S-aliases S-AliasProp )
    dup dup "/" rinstr strcut swap pop  ( S-aliases S-AliasProp S-Alias )
    rot ";" strcat swap strcat swap
    DBITEM swap nextprop
  REPEAT
  pop
  trig swap setname
;
 
: opt-query ( S-ShortName -- )
  "OPT-STATUS: " getShortName strcat menu-header
  me @ " " ansi_notify
  me @ isExpert? not if
    me @
    "^NOTE^NOTE: Opt-out means that all players are listening to the channel by"
    ansi_notify
    me @
    "^NOTE^default, and opt-in means that the the players must join before they can"
    ansi_notify
    me @
    "^NOTE^hear the channel."
    ansi_notify
  then
  me @
  "^INFO^Enter I for Opt-In, O for Opt-Out:"
  ansi_notify
  read toupper
  me @ "^SUCC^" 3 pick strcat ansi_notify
  dup "I" strcmp over "O" strcmp
  and if
    pop pop
    me @
    "^FAIL^Invalid Input. Change ignored."
    ansi_notify
    exit
  then
  setOptStatus
;
 
: id-color-query ( S-ShortName -- )
  "NID-COLOR: " getShortName strcat menu-header
  me @ " " ansi_notify
  dup getNetColor dup "" strcmp if
    "^^" "^" subst
    me @ "^INFO^Current network identifier color: ^MOVE^" rot strcat ansi_notify
  else
    pop
  then
  me @
  "^INFO^Enter new color for the network identifier or enter a period by itself"
  ansi_notify
  me @
  "^INFO^to keep the current one:"
  ansi_notify
  read
  me @ "^SUCC^" 3 pick strcat ansi_notify
  dup "." strcmp not if
    pop pop exit
  then
  dup STR-blank? if
    pop pop exit
  then
  toupper
  ansi_strip "^" swap strcat "^" strcat
  setNetColor
;
 
: msg-color-query ( S-ShortName -- )
  "MSG-COLOR: " getShortName strcat menu-header
  me @ " " ansi_notify
  dup getMessageColor dup "" strcmp if
    "^^" "^" subst
    me @ "^INFO^Current message color: ^MOVE^" rot strcat ansi_notify
  else
    pop
  then
  me @
  "^INFO^Enter new color for messages or enter a period by itself to keep the"
  ansi_notify
  me @
  "^INFO^current one:"
  ansi_notify
  read
  me @ "^SUCC^" 3 pick strcat ansi_notify
  dup "." strcmp not if
    pop pop exit
  then
  dup STR-blank? if
    pop pop exit
  then
  toupper
  ansi_strip "^" swap strcat "^" strcat
  setMessageColor
;
 
: say-msg-color-query ( S-ShortName -- )
  "SAYMSG-COLOR: " getShortName strcat menu-header
  me @ " " ansi_notify
  dup getSayMessageColor dup "" strcmp if
    "^^" "^" subst
    me @ "^INFO^Current say message color: ^MOVE^" rot strcat ansi_notify
  else
    pop
  then
  me @
  "^INFO^Enter new color for say messages or enter a period by itself to keep the"
  ansi_notify
  me @
  "^INFO^current one:"
  ansi_notify
  read
  me @ "^SUCC^" 3 pick strcat ansi_notify
  dup "." strcmp not if
    pop pop exit
  then
  dup STR-blank? if
    pop pop exit
  then
  toupper
  ansi_strip "^" swap strcat "^" strcat
  setSayMessageColor
;
 
: status-toggle ( S-ShortName -- )
  dup getActive "Active" strcmp not if
    me @ "^SUCC^Status toggled to Inactive." ansi_notify
    setChannelInactive
  else
    me @ "^SUCC^Status toggled to Active." ansi_notify
    setChannelActive
  then
;
 
: talk-level-query ( S-ShortName -- )
  "TALK-LEVEL: " getShortName strcat menu-header
  me @ isExpert? not if
    me @ 
    "^NOTE^An m-level is the mucker or wizard level of the character. Levels"
    ansi_notify
    me @
    "^NOTE^1, 2, 3 correspond to M1,M2,M3 bits; Levels 4, 5, 6, 7 correspond to"
    ansi_notify
    me @
    "^NOTE^the W1,W2,W3,W4 bits, 0 is none, and 8 is #1 (the Man). 9+ would"
    ansi_notify
    me @
    "^NOTE^block all wizards and mortals."
    ansi_notify
  then
  dup getLevelTalk intostr
  me @ "^NOTE^Current Talk Level: ^MOVE^" rot strcat ansi_notify
  me @ "^INFO^Enter the new Talk Level:" ansi_notify
  read
  dup me @ swap "^SUCC^" swap strcat ansi_notify
  atoi
  dup 0 < if
    pop 0
  else
    dup 8 > if
      pop 8
    then
  then
  setLevelTalk
;
 
: listen-level-query ( S-ShortName -- )
  "LISTEN-LEVEL: " getShortName strcat menu-header
  me @ isExpert? not if
    me @ 
    "^NOTE^An m-level is the mucker or wizard level of the character. Levels"
    ansi_notify
    me @
    "^NOTE^1, 2, 3 correspond to M1,M2,M3 bits; Levels 4, 5, 6, 7 correspond to"
    ansi_notify
    me @
    "^NOTE^the W1,W2,W3,W4 bits, 0 is none, and 8 is #1 (the Man). 9+ would"
    ansi_notify
    me @
    "^NOTE^block all wizards and mortals."
    ansi_notify
  then
  dup getLevelListen intostr
  me @ "^NOTE^Current Listen Level: ^MOVE^" rot strcat ansi_notify
  me @ "^INFO^Enter the new Listen Level:" ansi_notify
  read
  dup me @ swap "^SUCC^" swap strcat ansi_notify
  atoi
  dup 0 < if
    pop 0
  else
    dup 8 > if
      pop 8
    then
  then
  setLevelListen
;
 
: menu-channel-announcements ( S-ShortName -- )
  BEGIN
    "ANNOUNCE-EDIT: " getShortName strcat menu-header
    " ^INFO^1. ^WHITE^Announce on join?:          ^MOVE^"
    2 pick getAnnounceJoin if
      "Yes"
    else
      "No"
    then
    strcat
    " ^INFO^2. ^WHITE^Announce on unjoin?:        ^MOVE^"
    3 pick getAnnounceUnjoin if
      "Yes"
    else
      "No"
    then
    strcat
    " ^INFO^3. ^WHITE^Announce on connect?:       ^MOVE^"
    4 pick getAnnounceConnect if
      "Yes"
    else
      "No"
    then
    strcat
    " ^INFO^4. ^WHITE^Announce on disconnect?:    ^MOVE^"
    5 pick getAnnounceDisconnect if
      "Yes"
    else
      "No"
    then
    strcat
    " ^INFO^Q. ^WHITE^Quit Menu"
    " ^INFO^E. ^WHITE^Exit Menu System"
    6 EDIT-ansi_display
    read tolower
    case
      "q" strcmp not when
        me @ "^SUCC^Channel Announcements Editor Exited." ansi_notify     
        0 exit
      end
      "e" strcmp not when
        me @ "^SUCC^Channel Announcements Editor Exited." ansi_notify
        1 exit
      end
      "1" strcmp not when dup toggleAnnounceJoin 0 end
      "2" strcmp not when dup toggleAnnounceUnjoin 0 end
      "3" strcmp not when dup toggleAnnounceConnect 0 end
      "4" strcmp not when dup toggleAnnounceDisconnect 0 end
      default pop me @ "^FAIL^Invalid Option!" ansi_notify 0 end
    endcase
  UNTIL
  pop 0
  me @ "^SUCC^Channel Announcements Editor Exited." ansi_notify
; 
 
( menu for editing channel colors )
: menu-channel-colors ( S-ShortName -- )
  BEGIN
    "COLOR-EDIT: " getShortName strcat menu-header
    " ^INFO^1. ^WHITE^Network ID Color:      ^MOVE^"
    2 pick getNetColor "^^" "^" subst
    strcat
    " ^INFO^2. ^WHITE^Message Color:         ^MOVE^"
    3 pick getMessageColor "^^" "^" subst
    strcat
    " ^INFO^3. ^WHITE^Say Message Color:     ^MOVE^"
    4 pick getSayMessageColor "^^" "^" subst
    strcat
    " ^INFO^Q. ^WHITE^Quit Menu"
    " ^INFO^E. ^WHITE^Exit Menu System"
    5 EDIT-ansi_display
    read tolower
    case
      "q" strcmp not when
        me @ "^SUCC^Channel Colors Editor Exited." ansi_notify     
        0 exit
      end
      "e" strcmp not when
        me @ "^SUCC^Channel Colors Editor Exited." ansi_notify
        1 exit
      end
      "1" strcmp not when dup id-color-query 0 end
      "2" strcmp not when dup msg-color-query 0 end
      "3" strcmp not when dup say-msg-color-query 0 end
      default pop me @ "^FAIL^Invalid Option!" ansi_notify 0 end
    endcase
  UNTIL
  pop 0
  me @ "^SUCC^Channel Colors Editor Exited." ansi_notify
; 
 
: add-allowed-player-query ( S-ShortName -- )
  "ADD-PLAYER: " getShortName strcat menu-header
  me @ "^INFO^Enter the name of the player to add:" ansi_notify
  read
  MATCH-noisy_pmatch
  dup ok? if
    getShortName addAllowedPlayer
  else
    pop
  then
;
 
: remove-allowed-player-query ( S-ShortName -- )
  "REM-PLAYER: " getShortName strcat menu-header
  me @ "^INFO^Enter the name of the player to remove:" ansi_notify
  read
  MATCH-noisy_pmatch
  dup ok? if
    getShortName removeAllowedPlayer
  else
    pop
  then
;
 
: menu-allowed-players ( S-ShortName -- )
  BEGIN
    "ALLOWED: " getShortName strcat menu-header
    " ^INFO^1. ^WHITE^Use Allowed Player List:    ^MOVE^"
    2 pick getUseAllowedPlayerList if
      "Yes"
    else
      "No"
    then
    strcat
    " ^INFO^2. ^WHITE^Add Player"
    " ^INFO^3. ^WHITE^Remove Player"
    getShortName getAllowedPLayersString
    " ^INFO^Q. ^WHITE^Quit Menu"
    " ^INFO^E. ^WHITE^Exit Menu System"
    6 EDIT-ansi_display
    read tolower
    case
      "q" strcmp not when
        me @ "^SUCC^Allowed Players Editor Exited." ansi_notify     
        0 exit
      end
      "e" strcmp not when
        me @ "^SUCC^Allowed Players Editor Exited." ansi_notify
        1 1 exit
      end
      "1" strcmp not when
        toggleUseAllowedPlayerList 0
      end
      "2" strcmp not when
        add-allowed-player-query 0
      end
      "3" strcmp not when
        remove-allowed-player-query 0
      end
      default pop me @ "^FAIL^Invalid Option!" ansi_notify 0 end
    endcase
  UNTIL
  pop 0
  me @ "^SUCC^Allowed Players Editor Exited." ansi_notify
; 
 
( menu for editing general channel permissions )
: menu-channel-permissions ( S-ShortName -- )
  BEGIN
    "PERMISSIONS: " getShortName strcat menu-header
    " ^INFO^1. ^WHITE^Guests can Talk:            ^MOVE^"
    2 pick getGuestTalk if
      "Yes"
    else
      "No"
    then
    strcat
    " ^INFO^2. ^WHITE^Guests can Listen:          ^MOVE^"
    3 pick getGuestListen if
      "Yes"
    else
      "No"
    then
    strcat
    " ^INFO^3. ^WHITE^Zombies can Talk:           ^MOVE^"
    4 pick getZombieTalk if
      "Yes"
    else
      "No"
    then
    strcat
    " ^INFO^4. ^WHITE^Zombies can Listen:         ^MOVE^"
    5 pick getZombieListen if
      "Yes"
    else
      "No"
    then
    strcat
    " ^INFO^5. ^WHITE^Required M-Level to Talk:   ^MOVE^"
    6 pick getLevelTalk intostr strcat
    " ^INFO^6. ^WHITE^Required M-Level to Listen: ^MOVE^"
    7 pick getLevelListen intostr strcat
    " ^INFO^7. ^WHITE^Edit Allowed Player List"
    " ^INFO^8. ^WHITE^Edit Optee List"
    " ^INFO^Q. ^WHITE^Quit Menu"
    " ^INFO^E. ^WHITE^Exit Menu System"
    10 EDIT-ansi_display
    read tolower
    case
      "q" strcmp not when
        me @ "^SUCC^Channel Permissions Editor Exited." ansi_notify     
        0 exit
      end
      "e" strcmp not when
        me @ "^SUCC^Channel Permissions Editor Exited." ansi_notify
        1 exit
      end
      "1" strcmp not when dup toggleGuestTalk 0 end
      "2" strcmp not when dup toggleGuestListen 0 end
      "3" strcmp not when dup toggleZombieTalk 0 end
      "4" strcmp not when dup toggleZombieListen 0 end
      "5" strcmp not when dup talk-level-query 0 end
      "6" strcmp not when dup listen-level-query 0 end
      "7" strcmp not when dup menu-allowed-players end
      default pop me @ "^FAIL^Invalid Option!" ansi_notify 0 end
    endcase
  UNTIL
  if 1 else 0 then
  me @ "^SUCC^Channel Permissions Editor Exited." ansi_notify
; 
 
( channel-editor: menu for editing general channel settings )
: channel-editor ( S-ShortName -- )
  BEGIN
    "CHANNEL-EDIT: " getShortName strcat menu-header
    " ^INFO^1. ^WHITE^Channel Short Name:    ^MOVE^"
    2 pick strcat
    " ^INFO^2. ^WHITE^Channel Full Name:     ^MOVE^"
    3 pick getFullName strcat
    " ^INFO^3. ^WHITE^Channel Aliases:       ^MOVE^"
    4 pick getAliases strcat
    " ^INFO^4. ^WHITE^Opt-In/Opt-Out:        ^MOVE^"
    5 pick getOptStatus strcat
    " ^INFO^5. ^WHITE^Toggle Auto On/Off:    ^MOVE^"
    6 pick getAutoOnOffMode modeToDescription strcat
    " ^INFO^6. ^WHITE^Channel Status:        ^MOVE^"
    7 pick getActive strcat
    " ^INFO^7. ^WHITE^Edit Announcements"
    " ^INFO^8. ^WHITE^Edit Colors"
    " ^INFO^9. ^WHITE^Edit Permissions"
    " ^INFO^Q. ^WHITE^Quit Menu"
    " ^INFO^E. ^WHITE^Exit Menu System"
    11 EDIT-ansi_display
    read tolower
    case
      "q" strcmp not when exit end
      "e" strcmp not when
        me @ "^SUCC^Channel Editor Exited." ansi_notify
        exit
      end
      "1" strcmp not when short-name-query 0 end
      3 pick STR-blank? not if
        "2" strcmp not when dup full-name-query 0 end
        "3" strcmp not when dup alias-list-query 0 end
        "4" strcmp not when dup opt-query 0 end
        "5" strcmp not when dup toggleAutoOnOffMode 0 end
        "6" strcmp not when dup status-toggle 0 end
        "7" strcmp not when dup menu-channel-announcements end
        "8" strcmp not when dup menu-channel-colors end
        "9" strcmp not when dup menu-channel-permissions end
      then
      default pop me @ "^FAIL^Invalid Option!" ansi_notify 0 end
    endcase
  UNTIL
  pop
  me @ "^SUCC^Channel Editor Exited." ansi_notify
; 
 
: printWhoHeader ( -- )
  getShortName menu-header
  me @ "^WHITE^| ^FOREST^Player Name^WHITE^                                                  | ^FOREST^Talk? ^WHITE^|" ansi_notify
  me @ "^WHITE^|--------------------------------------------------------------+-------|" ansi_notify
;
 
: printWhoLine ( d -- )
  "^WHITE^| ^INFO^" over name dup " " 59 STR-fillfield
   "  ^WHITE^| " strcat strcat strcat
  swap canTalk? STR-blank? if
    " ^INFO^Yes  ^WHITE^|" 
  else
    " ^INFO^No   ^WHITE^|"
  then
  strcat
  me @ swap ansi_notify
;
 
: printWhoTail ( -- )
  me @ "^WHITE^------------------------------------------------------------------------" ansi_notify
;
 
: whoChannelHelper ( address s -- )
  ( S-ShortName )
  dup getOptStatus "I" strcmp not if
    ( The channel is an opt-in channel, so the refs are those listening )
    dup getOptList "##" explode
    BEGIN
      swap dup STR-blank? if
        pop
      else
        "" "#" subst
        atoi dbref dup awake? if
		  ( Here's the black magic. We have the address for the line print )
          ( below the list of dbrefs. Perform a 'pick' and execute the     )
          ( address.                                                       )
          over 3 + pick execute
        else
          pop
        then
      then
      1 - dup 0 =
    UNTIL
    pop pop pop
  else
    ( The channel is an opt-out channel, so the refs are those not listening )
    online
    BEGIN
      swap dup intostr "#" swap strcat "#" strcat 3 pick 3 + pick
      swap instr not if
        ( Address fetch and execute. See above                               )
        over 3 + pick execute
      then
      1 - dup 0 =
    UNTIL
    pop pop pop
  then
;
 
: autoOnOff ( -- )
  DBITEM CHANNELDIR nextprop ( S-propname )
  BEGIN dup STR-blank? not WHILE ( S-propname )
    dup dup "/" rinstr strcut swap pop ( S-propname S-shortname )
    command ! ( S-propname )
    getShortName getAutoOnOffMode
    dup 1 = if
      pop
      me @ getShortName isListening? if
        0 unJoinChannel
        me @
        "^SUCC^You automatically stop listening to the ^MOVE^" getShortName getFullName strcat
        "^SUCC^." strcat
        ansi_notify
      then
    else
      2 = if
        me @ canListen? if
          0 joinChannel
          me @
          "^SUCC^You automatically start listening to the ^MOVE^" getShortName getFullName strcat
          "^SUCC^." strcat
          ansi_notify
        then
      then
    then
    DBITEM swap nextprop (S-propname )
  REPEAT
  pop
;
 
: listChannels ( -- )
  " LIST" menu-header
  me @ "^WHITE^| ^FOREST^Short Name    ^WHITE^| ^FOREST^Channel^WHITE^                                      | ^FOREST^Talk? ^WHITE^|" ansi_notify
  me @ "^WHITE^|---------------+----------------------------------------------+-------|" ansi_notify

  DBITEM CHANNELDIR nextprop ( S-propname )
  BEGIN dup STR-blank? not WHILE ( S-propname )
    dup dup "/" rinstr strcut swap pop ( S-propname S-shortname )
    command ! ( S-propname )
    me @ canListen? if (S-propname )
      "^WHITE^| ^INFO^" (S-propname S-line )
      getShortName dup " " 14 STR-fillfield strcat strcat ( S-propname S-line )
      "^WHITE^| ^INFO^" strcat ( S-propname S-line )
      getShortName getFullName ( S-propname S-line S-channelname )
      dup " " 45 STR-fillfield strcat strcat ( S-propname S-line )
      "^WHITE^| ^INFO^" strcat ( S-propname S-line )
      me @ canTalk? STR-blank? if
        " Yes  ^WHITE^|"
      else
        "  No  ^WHITE^|"
      then
      strcat
      me @ swap ansi_notify
    then
    DBITEM swap nextprop (S-propname )
  REPEAT
  printWhoTail
;
 
: whoChannel ( s -- )
  dup STR-blank? if
    pop getShortName dup STR-blank? if
      me @ "^FAIL^Which channel?" ansi_notify
      exit
    then
  else
    dup getFullName STR-blank? if
      me @ "^FAIL^Which channel?" ansi_notify
      exit
    then
  then
  printWhoHeader
  'printWhoLine swap whoChannelHelper
  printWhoTail
;
 
: connectAnnouncement ( -- )
  ( We only announce if the person is actually connected and this is their )
  ( only connection.                                                       )
  me @ awake? 1 = if
    DBITEM CHANNELDIR nextprop
    BEGIN dup STR-blank? not WHILE
      dup dup "/" rinstr strcut swap pop ( S-propname S-shortname )
      command ! ( Effectively making all getShortName's work )
      getShortName getAnnounceConnect if ( This channel announces connects? )
        me @ getShortName isListening? if    
          ":connects and starts listening to " getShortName getFullName strcat
          ". " strcat getShortName getNetColor strcat SYSTEMMARKER strcat
          Talk
        then
      then
      DBITEM swap nextprop
    REPEAT
  then
  pop
;
 
: disconnectAnnouncement ( -- )
  ( We only announce if the person is completely disconnected )
  me @ awake? if
    exit
  then
  DBITEM CHANNELDIR nextprop
  BEGIN  dup STR-blank? not WHILE
    dup dup "/" rinstr strcut swap pop ( S-propname S-shortname )
    command ! ( Effectively making all getShortName's work )
    getShortName getAnnounceDisconnect if ( This channel announces disconnect? )
      me @ getShortName isListening? if
        ":disconnects and stops listening to "
        getShortName getFullName strcat
        ". " strcat
        getShortName getNetColor strcat
        SYSTEMMARKER strcat
        Talk
      then
    then
    DBITEM swap nextprop
  REPEAT
;
 
: checkConfiguration ( -- )
  "$chat/chatobject" match dup ok? if
    dup exit? swap trig dbcmp and not if
      me @ "ARCHWIZARD" flag? if
        #0 "_reg/chat/chatobject" trig setprop
      else
        me @ "^FAIL^WARNING! The chat system exit is incorrectly configured. Notify a W3+ staff member." ansi_notify
      then
    then
  else
    me @ "ARCHWIZARD" flag? if
      #0 "_reg/chat/chatobject" trig setprop
    else
      me @ "^FAIL^WARNING! The chat system exit is incorrectly configured. Notify a W3+ staff member." ansi_notify
    then
  then
  trig name "gloria" instr not if
    me @ "ARCHWIZARD" flag? if
      trig name "gloria;" swap strcat trig swap setname
    then
  then
  trig name "gcs" instr not if
    me @ "ARCHWIZARD" flag? if
      trig name "gcs;" swap strcat trig swap setname
    then
  then
;
 
: main ( s-args -- )
  ( To prevent programmers from calling this after overwriting 'me' )
  "me" match me !

  strip
  ( To make it difficult to fake chat system messages )
  "" SYSTEMMARKER subst

  dup STR-blank? if
    checkConfiguration
    pop print-help exit
  then
  dup "Connect" strcmp not if
    ( This prevents someone from triggering an announcement by hand )
    trig #-1 dbcmp if
      pop
      ( Both of these should not execute if this is a duplicate connection )
      me @ awake? 1 = if
        autoOnOff
        connectAnnouncement
      then
      exit
    then
  then
  dup "Disconnect" strcmp not if
    ( This prevents someone from triggering an announcement by hand )
    trig #-1 dbcmp if
      pop disconnectAnnouncement exit
    then
  then
  checkConfiguration
  dup STR-command dup "" strcmp not if
    pop
    me @ canTalk? dup STR-blank? if
      me @ getShortName isListening? not if
        1 joinChannel
      then
      pop striplead Talk ( output to appropiate channel )
    else
      me @ swap ansi_notify pop
    then
    exit
  then
  swap pop
  STR-splitargs swap
  dup "help" strcmp not if
    pop pop print-help exit
  then
  dup "add" strcmp not if
    pop pop
    me @ "MAGE" flag? if
      ""
      channel-editor
    else
      print-help
    then
    exit
  then
  dup "list" strcmp not if
    pop pop
    listChannels
    exit
  then
  dup "edit" strcmp not if
    pop
    me @ "MAGE" flag? if
      dup STR-blank? if
        pop getShortName
      then
      channel-editor
      pop
    else
      pop print-help
    then
    exit
  then
  dup "on" strcmp not if
    pop pop
    1 joinChannel
    exit
  then
  dup "join" strcmp not if
    pop pop
    1 joinChannel
    exit
  then
  dup "enter" strcmp not if
    pop pop
    1 joinChannel
    exit
  then
  dup "off" strcmp not if
    pop pop
    1 unJoinChannel
    exit
  then
  dup "unjoin" strcmp not if
    pop pop
    1 unJoinChannel
    exit
  then
  dup "leave" strcmp not if
    pop pop
    1 unJoinChannel
    exit
  then
  dup "who" strcmp not if
    pop
    whoChannel
    exit
  then
  pop
  print-help
;
.
c
q
@register cmd-glow-chat-system=cmd/glow-chat-system
@set $cmd/glow-chat-system=L
@set $cmd/glow-chat-system=W3
@set $cmd/glow-chat-system=_version:$Revision: 1.37 $

